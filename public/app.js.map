{"version":3,"sources":["app/app.js","app/lib/get-json.js","app/lib/interpolate-lines.js","app/lib/line-from-points.js"],"names":["THREE","FAKE_HASH","HASH_LENGTH","length","FLAT_LINE","split","map","CAMERA_CLIP_Z","CAMERA_SPEED","CAMERA_Z","devicePixelRatio","window","WIDTH","innerWidth","HEIGHT","innerHeight","x0","dx","dz","scene","Scene","background","Color","fog","Fog","camera","PerspectiveCamera","renderer","WebGLRenderer","setSize","domElement","style","width","height","document","body","appendChild","position","y","z","lookAt","Vector3","render","t0","animate","t","requestAnimationFrame","touchVel","touchFriction","setZ","yFromChar","char","parseInt","then","blocks","b","hash","hashes","data","lines","forEach","add","line","performance","now","lastTouchY","addEventListener","onWheel","onTouchDown","onTouchMove","e","deltaY","console","log","touches","screenY","touchY","dY","preventDefault","stopPropagation","url","Promise","reqListener","text","responseText","obj","JSON","parse","resolve","oReq","XMLHttpRequest","onload","open","send","allPoints","i","points0","pointsI","j","INTERPOLATIONS","pointsInter","getInterpolated","push","points","interpolate","a","c","k","easeInOutQuad","linear","pointsA","pointsB","isInterpolated","curve","CatmullRomCurve3","p","pi","cpoints","getPoints","geometry","BufferGeometry","setFromPoints","material","LineBasicMaterial","INTERPOLATED_MATERIAL","MAIN_MATERIAL","curveObject","Line","color"],"mappings":"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","file":"public/app.js","sourcesContent":["import * as THREE from 'three'\n// import lineFromPoints from './lib/line-from-points'\nimport interpolateLines from './lib/interpolate-lines'\nimport getJson from './lib/get-json'\n\nconst FAKE_HASH =\n  '816534932c2b7154836da6afc367695e6337db8a921823784c14378abed4f7d7'\nconst HASH_LENGTH = FAKE_HASH.length\nconst FLAT_LINE = FAKE_HASH.split('').map(() => 0)\nconst CAMERA_CLIP_Z = 1000\nconst CAMERA_SPEED = 1\nconst CAMERA_Z = 300\nconst devicePixelRatio = window.devicePixelRatio || 1\nconst WIDTH = window.innerWidth * devicePixelRatio\nconst HEIGHT = window.innerHeight * devicePixelRatio\nconst x0 = -WIDTH / 2\nconst dx = WIDTH / HASH_LENGTH\nconst dz = CAMERA_CLIP_Z / 2\n\nconst scene = new THREE.Scene()\nscene.background = new THREE.Color(255, 255, 255)\nscene.fog = new THREE.Fog(0xffffff, 10, 1000)\nconst camera = new THREE.PerspectiveCamera(\n  75,\n  WIDTH / HEIGHT,\n  0.1,\n  CAMERA_CLIP_Z\n)\n\nconst renderer = new THREE.WebGLRenderer()\n\nrenderer.setSize(WIDTH, HEIGHT)\n// we set this in css instead\nrenderer.domElement.style.width = ''\nrenderer.domElement.style.height = ''\ndocument.body.appendChild(renderer.domElement)\n\n// fontLoader.load('helvetiker_regular.typeface.json', function(font) {\n//   var geometry = new THREE.TextGeometry('Hello three.js!', {\n//     font: font,\n//     size: 80,\n//     height: 5,\n//     curveSegments: 12,\n//     bevelEnabled: true,\n//     bevelThickness: 10,\n//     bevelSize: 8,\n//     bevelSegments: 5\n//   })\n// })\n\n// var geometry = new THREE.BoxGeometry(1, 1, 1)\n// var material = new THREE.MeshBasicMaterial({ color: 0x00ff00 })\n// var cube = new THREE.Mesh(geometry, material)\n// scene.add(cube)\n\ncamera.position.y = 250\ncamera.position.z = CAMERA_Z\ncamera.lookAt(new THREE.Vector3(0, 0, -100))\n\n// // Create a sine-like wave\n// var curve = new THREE.SplineCurve([\n//   new THREE.Vector2(-10, 0),\n//   new THREE.Vector2(-5, 5),\n//   new THREE.Vector2(0, 0),\n//   new THREE.Vector2(5, -5),\n//   new THREE.Vector2(10, 0)\n// ])\n\n// var points = curve.getPoints(50)\n// var geometry = new THREE.BufferGeometry().setFromPoints(points)\n\n// var material = new THREE.LineBasicMaterial({ color: 0xff0000 })\n\n// // Create the final object to add to the scene\n// var splineObject = new THREE.Line(geometry, material)\n// scene.add(splineObject)\n\nrenderer.render(scene, camera)\nlet t0 = 0\nfunction animate(t) {\n  requestAnimationFrame(animate)\n  // camera.position.setZ(CAMERA_Z - CAMERA_SPEED * (t - t0))\n  const z = camera.position.z\n  touchVel *= touchFriction\n  camera.position.setZ(touchVel * CAMERA_SPEED + z)\n  renderer.render(scene, camera)\n}\n\nfunction yFromChar(char) {\n  return parseInt(char, 16) * 6\n}\n\ngetJson('http://130.211.7.182/blocks')\n  .then(blocks => blocks.map(b => b.hash))\n  .then(hashes => hashes.map(hash => hash.split('').map(yFromChar)))\n  .then(data => [FLAT_LINE, FLAT_LINE, ...data, FLAT_LINE, FLAT_LINE])\n  .then(data => interpolateLines(data, x0, dx, dz))\n  .then(lines => {\n    lines.forEach(line => scene.add(line))\n  })\n  // .then(objs =>\n  //   objs.map((points, i) => ({\n  //     points,\n  //     z: i * 300 + 600\n  //   }))\n  // )\n  // .then(objs => objs.map((o, i) => lineFromPoints(o.points, x0, dx, 400, i)))\n  // .then(splines =>\n  //   splines.forEach(curve => {\n  //     scene.add(curve)\n  //   })\n  // )\n  .then(() => {\n    t0 = performance.now()\n    animate()\n  })\n\nlet lastTouchY = void 0\nlet touchVel = 0\nconst touchFriction = 0.9\nwindow.addEventListener('wheel', onWheel)\ndocument.addEventListener('touchstart', onTouchDown)\nwindow.addEventListener('touchmove', onTouchMove)\n\nfunction onWheel(e) {\n  const z = camera.position.z\n  camera.position.setZ(e.deltaY * CAMERA_SPEED + z)\n}\nfunction onTouchDown(e) {\n  console.log(e)\n  lastTouchY = e.touches[0].screenY\n}\nfunction onTouchMove(e) {\n  const touchY = e.touches[e.touches.length - 1].screenY\n  if (typeof lastTouchY === 'number') {\n    const dY = lastTouchY - touchY\n    touchVel += dY\n  }\n  lastTouchY = touchY\n  e.preventDefault()\n  e.stopPropagation()\n  return false\n}\n","export default function(url) {\n  return new Promise(resolve => {\n    function reqListener() {\n      const text = this.responseText\n      const obj = JSON.parse(text)\n      resolve(obj)\n    }\n    var oReq = new XMLHttpRequest()\n    oReq.onload = reqListener\n    oReq.open('GET', url)\n    oReq.send()\n  })\n}\n","import * as THREE from 'three'\nimport lineFromPoints from './line-from-points'\n\nconst INTERPOLATIONS = 50\n\nfunction interpolate(a, b, c) {\n  const k = easeInOutQuad(c)\n  return a * (1 - k) + b * k\n}\nfunction linear(t) {\n  return t\n}\nfunction easeInOutQuad(t) {\n  return t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t\n}\n\nfunction getInterpolated(pointsA, pointsB, c) {\n  const points = []\n  for (let i = 0; i < pointsA.length; i++) {\n    points.push(interpolate(pointsA[i], pointsB[i], c))\n  }\n  return points\n}\n\nexport default function(data, x0, dx, dz) {\n  // interpolate points between the two lines\n  const allPoints = [data[0]]\n  for (let i = 1; i < data.length; i++) {\n    const points0 = data[i - 1]\n    const pointsI = data[i]\n    for (let j = 1; j < INTERPOLATIONS - 1; j++) {\n      const pointsInter = getInterpolated(points0, pointsI, j / INTERPOLATIONS)\n      allPoints.push(pointsInter)\n    }\n    allPoints.push(pointsI)\n  }\n\n  // create lines for each point array\n  return allPoints.map((points, i) =>\n    lineFromPoints(\n      points,\n      x0,\n      dx,\n      dz / INTERPOLATIONS,\n      i,\n      i % (INTERPOLATIONS - 1) !== 0\n    )\n  )\n}\n","import * as THREE from 'three'\n\nconst MAIN_MATERIAL = new THREE.LineBasicMaterial({\n  color: 0x000000\n})\nconst INTERPOLATED_MATERIAL = new THREE.LineBasicMaterial({\n  color: 0xff88cc\n})\n\nexport default function(points, x0, dx, dz, i, isInterpolated) {\n  const curve = new THREE.CatmullRomCurve3(\n    points.map((p, pi) => new THREE.Vector3(x0 + pi * dx, p, -dz * i))\n  )\n\n  const cpoints = curve.getPoints(400)\n  const geometry = new THREE.BufferGeometry().setFromPoints(cpoints)\n\n  const material = new THREE.LineBasicMaterial(\n    isInterpolated ? INTERPOLATED_MATERIAL : MAIN_MATERIAL\n  )\n\n  // Create the final object to add to the scene\n  const curveObject = new THREE.Line(geometry, material)\n  return curveObject\n}\n"]}